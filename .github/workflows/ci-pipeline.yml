name: Aegis CI Pipeline

on: [push, pull_request]

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.9', '3.10']

    steps:
      # Step 1: Checkout the code
      - name: Checkout Repository
        uses: actions/checkout@v3

      # Step 2: Set up the correct Python version from our matrix
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      # Step 3: Set up dependency caching
      - name: Cache Pip Dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-pip-${{ matrix.python-version }}-

      # Step 4: Install all dependencies. THIS IS THE CORRECTED COMMAND.
      - name: Install Dependencies
        run: python -m pip install ".[dev]"

      # Step 5: Lint with Ruff
      - name: Lint with Ruff
        run: ruff check .

      # Step 6: Run Unit Tests with Coverage
      - name: Run Unit Tests with Coverage and Test Reports
        run: pytest --cov=aegis --cov-report=xml --junitxml=junit.xml

      - name: Upload Coverage to Codecov
        uses: codecov/codecov-action@v4.0.1
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./coverage.xml # Be explicit about which file to upload

      # --- ADD THIS NEW STEP ---
      - name: Upload Test Results to Codecov
        uses: codecov/test-results-action@v1
        with:
          files: ./junit.xml # Tell this action to upload the JUnit file

      # Step 7: Run the full pipeline as an integration test
      - name: Run PySpark Pipeline (Integration Test)
        run: |
          export NUM_RECORDS=10000
          python scripts/generate_data.py
          python aegis/pipeline.py

      # Step 8: Upload all our result artifacts
      - name: Upload Run Artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: run-artifacts-${{ matrix.python-version }}
          path: |
            run_summary.json
            coverage.xml
            junit.xml

  # The security scan job remains the same.
  security-scan:
    name: Security Scan (Trufflehog)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Run Trufflehog secret scanner
        uses: trufflesecurity/trufflehog@main
        with:
          path: .
          extra_args: --debug
